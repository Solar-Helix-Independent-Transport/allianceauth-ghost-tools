{"version":3,"sources":["apis/Dashboard.js","components/PanelLoader.js","components/ErrorLoader.js","components/BaseTable.js","components/StagingFilters.js","components/DashTable.js","index.js"],"names":["axios","get","api","console","log","data","character_id","post","headers","cookies","getItem","defaults","xsrfHeaderName","PanelLoader","Panel","Body","className","ErrorLoader","xmlns","width","height","fill","class","viewBox","d","colourStyles","option","styles","color","MyTooltip","message","Tooltip","id","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","textColumnFilter","count","length","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","options","React","useMemo","Set","forEach","row","values","add","title","label","defaultValue","concat","map","o","i","defaultPropGetter","BaseTable","isLoading","isFetching","error","columns","asyncExpandFunction","getRowProps","defaultColumn","Filter","filterTypes","text","rows","ids","filter","some","rowValue","name","hasOwnProperty","originalSubRows","reduce","p","r","ob","split","prop","toLowerCase","includes","useTable","initialState","pageSize","useFilters","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","visibleColumns","state","pageIndex","Table","striped","headerGroup","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","render","canSort","isSorted","isSortedDesc","Glyphicon","glyph","canFilter","rowProps","cells","cell","style","verticalAlign","getCellProps","isExpanded","ButtonToolbar","ButtonGroup","Button","bsStyle","onClick","disabled","active","SplitButton","onSelect","Number","MenuItem","eventKey","OverlayTrigger","placement","overlay","Date","toLocaleString","StagingSelect","labelText","ref","isMulti","entry","sort","join","Dashboard","useQuery","loadDash","useState","orphans","setOrphans","stagings","setStagings","Header","accessor","Cell","props","display","postOpenChar","original","char","rel","href","whiteSpace","ReactTimeAgo","date","parse","graphData","characters","location","alliances","main","alli_id","Checkbox","checked","TimeAgo","addDefaultLocale","en","queryClient","QueryClient","InvoicesView","client","appDiv","document","getElementById"],"mappings":"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","file":"static/js/main.d490f73a.chunk.js","sourcesContent":["import axios from \"axios\";\nimport cookies from \"js-cookies\";\n\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nexport async function loadDash() {\n  const api = await axios.get(`/ghosts/api/ghost/list`);\n  console.log(`get structure list in api`);\n  console.log(api);\n  return api.data;\n}\n\nexport async function postOpenChar(character_id) {\n  console.log(`sent open request ${character_id}`);\n  const api = await axios.post(\n    `/ghosts/api/ghost/kick?character_id=${character_id}`,\n    { character_id: character_id },\n    { headers: { \"X-CSRFToken\": cookies.getItem(\"csrftoken\") } },\n  );\n  return api.data;\n}\n","import React from \"react\";\nimport { Bars } from \"@agney/react-loading\";\nimport { Panel } from \"react-bootstrap\";\nexport const PanelLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <Bars className=\"spinner-size\" />\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Panel } from \"react-bootstrap\";\nimport \"./PanelLoader.css\";\n\nexport const ErrorLoader = () => {\n  return (\n    <Panel.Body className=\"flex-container\">\n      <div className=\"text-center\">\n        <div className=\"error-size bottom-text\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"100\"\n            height=\"100\"\n            fill=\"currentColor\"\n            class=\"bi bi-exclamation-triangle error-anim\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z\" />\n            <path d=\"M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z\" />\n          </svg>\n        </div>\n        <h3 className=\"text-margin\">Error Loading Component</h3>\n      </div>\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport { Button, Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport {\n  useTable,\n  useFilters,\n  usePagination,\n  useSortBy,\n  useExpanded,\n} from \"react-table\";\nimport Select from \"react-select\";\nimport { Bars } from \"@agney/react-loading\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Glyphicon,\n  MenuItem,\n  SplitButton,\n  Table,\n} from \"react-bootstrap\";\nimport \"./BaseTable.css\";\nimport { ErrorLoader } from \"../components/ErrorLoader\";\n\nexport function SubRows({\n  row,\n  rowProps,\n  visibleColumns,\n  data,\n  error,\n  isLoading,\n}) {\n  if (isLoading) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Loading...</td>\n      </tr>\n    );\n  }\n  if (error) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Unable to Fetch from API!</td>\n      </tr>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <tr>\n        <td />\n        <td colSpan={visibleColumns.length - 1}>Empty!</td>\n      </tr>\n    );\n  }\n\n  // error handling here :)\n\n  return (\n    <>\n      {data.map((x, i) => {\n        return (\n          <tr {...rowProps} key={`${rowProps.key}-expanded-${i}`}>\n            {row.cells.map((cell) => {\n              return (\n                <td {...cell.getCellProps()}>\n                  {cell.render(cell.column.SubCell ? \"SubCell\" : \"Cell\", {\n                    value: cell.column.accessor && cell.column.accessor(x, i),\n                    row: { ...row, original: x },\n                  })}\n                </td>\n              );\n            })}\n          </tr>\n        );\n      })}\n    </>\n  );\n}\n\nexport const colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\nfunction MyTooltip({ message }) {\n  return <Tooltip id=\"character_tooltip\">{message}</Tooltip>;\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  return <></>;\n}\n\nexport function textColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      className=\"form-control\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { setFilter, filterValue, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    if (!preFilteredRows) {\n      return [];\n    }\n    preFilteredRows.forEach((row) => {\n      if (row.values[id] !== null) {\n        if (typeof row.values[id] === \"object\") {\n          options.add(row.values[id][\"name\"]);\n        } else {\n          options.add(row.values[id]);\n        }\n      }\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      key={filterValue}\n      title={filterValue}\n      onChange={(e) => setFilter(e.value)}\n      value={{ label: filterValue || \"All\" }}\n      defaultValue={{ label: \"All\" }}\n      styles={colourStyles}\n      options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n        options.map((o, i) => {\n          return { id: i, value: o, label: o };\n        }),\n      )}\n    />\n  );\n}\n\nconst defaultPropGetter = () => ({});\n\nfunction strToKey(keyString, ob) {\n  return keyString.split(\".\").reduce(function (p, prop) {\n    return p[prop];\n  }, ob);\n}\n\nexport const BaseTable = ({\n  isLoading,\n  isFetching,\n  data,\n  error,\n  columns,\n  asyncExpandFunction,\n  getRowProps = defaultPropGetter,\n}) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    [],\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, ids, filterValue) => {\n        return rows.filter((row) => {\n          return ids.some((id) => {\n            if (!filterValue) {\n              return true;\n            } else {\n              let rowValue = row.values[id];\n              if (typeof rowValue === \"object\") {\n                rowValue = rowValue.name;\n              }\n              if (row.hasOwnProperty(\"originalSubRows\")) {\n                rowValue += row.originalSubRows.reduce((p, r) => {\n                  return (p += \" \" + strToKey(id, r));\n                }, \"\");\n              }\n              return rowValue\n                ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                : false;\n            }\n          });\n        });\n      },\n    }),\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    visibleColumns,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      initialState: { pageSize: 20 },\n    },\n    useFilters,\n    useSortBy,\n    useExpanded,\n    usePagination,\n  );\n\n  if (isLoading)\n    return (\n      <div className=\"col-xs-12 text-center\">\n        <Bars className=\"spinner-size\" />\n      </div>\n    );\n\n  if (error) return <ErrorLoader />;\n\n  return (\n    <>\n      <Table striped>\n        <thead {...getTableProps()}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span className=\"pull-right\">\n                    {column.canSort ? (\n                      column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <Glyphicon glyph=\"sort-by-attributes-alt\" />\n                        ) : (\n                          <Glyphicon glyph=\"sort-by-attributes\" />\n                        )\n                      ) : (\n                        <Glyphicon glyph=\"sort\" />\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            const rowProps = getRowProps(row);\n            return (\n              <>\n                <tr {...row.getRowProps(rowProps)}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        style={{ verticalAlign: \"middle\" }}\n                        {...cell.getCellProps()}\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n                {row.isExpanded &&\n                  asyncExpandFunction({ row, rowProps, visibleColumns })}\n              </>\n            );\n          })}\n        </tbody>\n      </Table>\n      <div className=\"pagination pull-right\">\n        <ButtonToolbar>\n          <ButtonGroup>\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"step-backward\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"triangle-left\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"triangle-right\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"step-forward\" />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <Button active bsStyle=\"success\">\n              {\"Page Size:\"}\n            </Button>{\" \"}\n            <SplitButton\n              id=\"pageSizeDropdown\"\n              bsStyle=\"success\"\n              title={pageSize}\n              onSelect={(e) => {\n                setPageSize(Number(e));\n              }}\n            >\n              {[20, 50, 100, 1000000].map((pageSize) => (\n                <MenuItem\n                  id={pageSize}\n                  key={pageSize}\n                  eventKey={pageSize}\n                  value={pageSize}\n                >\n                  Show {pageSize}\n                </MenuItem>\n              ))}\n            </SplitButton>\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n      <div className=\"pagination pull-left\">\n        <ButtonGroup>\n          <Button active bsStyle=\"info\">\n            {\n              <>\n                {pageOptions.length > 0 ? (\n                  <>\n                    Page{\" \"}\n                    <strong>\n                      {pageIndex + 1} of {pageOptions.length}\n                    </strong>\n                  </>\n                ) : (\n                  <>\n                    Page <strong>- of -</strong>\n                  </>\n                )}\n              </>\n            }\n          </Button>{\" \"}\n          {isFetching ? (\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={MyTooltip({ message: \"Refreshing Data\" })}\n            >\n              <Button bsStyle=\"info\">\n                <Glyphicon\n                  className=\"glyphicon-refresh-animate\"\n                  glyph=\"refresh\"\n                />\n              </Button>\n            </OverlayTrigger>\n          ) : (\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={MyTooltip({\n                message: \"Data Loaded: \" + new Date().toLocaleString(),\n              })}\n            >\n              <Button bsStyle=\"info\">\n                <Glyphicon glyph=\"ok\" />\n              </Button>\n            </OverlayTrigger>\n          )}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport Select from \"react-select\";\n\nconst colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\nexport const StagingSelect = ({ setFilter, data, labelText, isFetching }) => {\n  let options = data.map((ref) => {\n    return {\n      value: ref,\n      label: ref,\n    };\n  });\n  const handleState = (entry) => {\n    let values = entry.map((o) => {\n      return o.value;\n    });\n    console.log(values.sort().join(\",\"));\n    setFilter(values.sort());\n  };\n\n  return (\n    <div className=\"flex-label-container\">\n      <div className=\"flex-label\">\n        <h5>{labelText}</h5>\n      </div>\n      <Select\n        className=\"flex-select\"\n        styles={colourStyles}\n        options={options}\n        isLoading={isFetching}\n        isMulti={true}\n        onChange={handleState}\n      />\n    </div>\n  );\n};\n","import React, {useState} from \"react\";\nimport { Panel, Checkbox, Button, ButtonGroup } from \"react-bootstrap\";\nimport { useQuery } from \"react-query\";\nimport { loadDash, postOpenChar } from \"../apis/Dashboard\";\nimport { PanelLoader } from \"./PanelLoader\";\nimport { BaseTable, textColumnFilter, SelectColumnFilter } from \"./BaseTable\";\nimport Select from \"react-select\";\nimport { ErrorLoader } from \"./ErrorLoader\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport { StagingSelect } from \"./StagingFilters\";\n\nexport const Dashboard = () => {\n  const { isLoading, error, data, isFetching } = useQuery([\"dashboard\"], () =>\n    loadDash(),\n  );\n  const [orphans, setOrphans] = useState(false);\n  const [stagings, setStagings] = useState([]);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Character\",\n        accessor: \"char.name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div>\n            <ButtonGroup style={{ display: \"flex\" }}>\n              <Button\n                bsStyle={\"info\"}\n                onClick={() => {\n                  postOpenChar(props.row.original.char.id);\n                }}\n              >\n                <i class=\"fas fa-external-link-alt\"></i>\n              </Button>\n              <Button\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://zkillboard.com/search/${props.value}/`}\n              >\n                {props.value}{\" \"}\n              </Button>\n            </ButtonGroup>\n          </div>\n        ),\n      },\n      {\n        Header: \"Main\",\n        accessor: \"main.name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Corp\",\n        accessor: \"main.corp\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Alliance\",\n        accessor: \"main.alli\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Location\",\n        accessor: \"location.name\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Ship\",\n        accessor: \"ship.name\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Death Clone\",\n        accessor: \"death_clone.name\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>{props.value}</div>\n        ),\n      },\n      {\n        Header: \"Last Online\",\n        accessor: \"logoff_date\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            {props.value ? (\n              <ReactTimeAgo date={Date.parse(props.value)} />\n            ) : (\n              <></>\n            )}\n          </div>\n        ),\n      },\n      {\n        Header: \"Join Date\",\n        accessor: \"start_date\",\n        Cell: (props) => (\n          <div style={{ whiteSpace: \"nowrap\" }}>\n            {props.value ? (\n              <ReactTimeAgo date={Date.parse(props.value)} />\n            ) : (\n              <></>\n            )}\n          </div>\n        ),\n      },\n    ],\n    [],\n  );\n\n  if (isLoading) return <PanelLoader />;\n\n  if (error) return <ErrorLoader />;\n  \n\n  let graphData = data.characters\n  \n  if (stagings.length > 0 ){\n    graphData = graphData.filter(row => {\n      return !stagings.includes(row.location.name);\n    });\n  }\n  \n  if (orphans){\n    graphData = graphData.filter(row => {\n      return !data.alliances.includes(row.main.alli_id);\n    })\n  }\n\n  return (\n    <Panel.Body>\n      <StagingSelect\n        data={data.stagings}\n        setFilter={setStagings}\n        labelText=\"Staging Filter\"\n        { ...{isFetching}}\n      />\n      <Checkbox\n        onChange={(e) => {\n          setOrphans(e.target.checked);\n        }}\n      >\n        Orphans Only\n      </Checkbox>\n\n      <BaseTable data={ graphData } {...{ isLoading, columns, error, isFetching }} />\n    </Panel.Body>\n  );\n};\n","import TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Dashboard } from \"./components/DashTable\";\nimport \"./index.css\";\n\nTimeAgo.addDefaultLocale(en);\n\nconst queryClient = new QueryClient();\n\nconst InvoicesView = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Dashboard />\n    </QueryClientProvider>\n  );\n};\n\nconst appDiv = document.getElementById(\"root\");\nrender(<InvoicesView />, appDiv);\n"],"sourceRoot":""}
